<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.yesomething.dao.FriendsMapper">
  <resultMap id="BaseResultMap" type="cn.yesomething.domain.Friends">
    <id column="friends_id" jdbcType="INTEGER" property="friendsId" />
    <result column="friend_id" jdbcType="INTEGER" property="friendId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="friend_name" jdbcType="VARCHAR" property="friendName" />
    <result column="friend_type" jdbcType="INTEGER" property="friendType" />
    <result column="friend_group_type" jdbcType="INTEGER" property="friendGroupType" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    friends_id, friend_id, user_id, friend_name, friend_type, friend_group_type
  </sql>
  <select id="selectByExample" parameterType="cn.yesomething.domain.FriendsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from friends
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from friends
    where friends_id = #{friendsId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from friends
    where friends_id = #{friendsId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.yesomething.domain.FriendsExample">
    delete from friends
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.yesomething.domain.Friends">
    insert into friends (friends_id, friend_id, user_id, 
      friend_name, friend_type, friend_group_type
      )
    values (#{friendsId,jdbcType=INTEGER}, #{friendId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{friendName,jdbcType=VARCHAR}, #{friendType,jdbcType=INTEGER}, #{friendGroupType,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.yesomething.domain.Friends">
    insert into friends
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="friendsId != null">
        friends_id,
      </if>
      <if test="friendId != null">
        friend_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="friendName != null">
        friend_name,
      </if>
      <if test="friendType != null">
        friend_type,
      </if>
      <if test="friendGroupType != null">
        friend_group_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="friendsId != null">
        #{friendsId,jdbcType=INTEGER},
      </if>
      <if test="friendId != null">
        #{friendId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="friendName != null">
        #{friendName,jdbcType=VARCHAR},
      </if>
      <if test="friendType != null">
        #{friendType,jdbcType=INTEGER},
      </if>
      <if test="friendGroupType != null">
        #{friendGroupType,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.yesomething.domain.FriendsExample" resultType="java.lang.Long">
    select count(*) from friends
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update friends
    <set>
      <if test="record.friendsId != null">
        friends_id = #{record.friendsId,jdbcType=INTEGER},
      </if>
      <if test="record.friendId != null">
        friend_id = #{record.friendId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.friendName != null">
        friend_name = #{record.friendName,jdbcType=VARCHAR},
      </if>
      <if test="record.friendType != null">
        friend_type = #{record.friendType,jdbcType=INTEGER},
      </if>
      <if test="record.friendGroupType != null">
        friend_group_type = #{record.friendGroupType,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update friends
    set friends_id = #{record.friendsId,jdbcType=INTEGER},
      friend_id = #{record.friendId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      friend_name = #{record.friendName,jdbcType=VARCHAR},
      friend_type = #{record.friendType,jdbcType=INTEGER},
      friend_group_type = #{record.friendGroupType,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.yesomething.domain.Friends">
    update friends
    <set>
      <if test="friendId != null">
        friend_id = #{friendId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="friendName != null">
        friend_name = #{friendName,jdbcType=VARCHAR},
      </if>
      <if test="friendType != null">
        friend_type = #{friendType,jdbcType=INTEGER},
      </if>
      <if test="friendGroupType != null">
        friend_group_type = #{friendGroupType,jdbcType=INTEGER},
      </if>
    </set>
    where friends_id = #{friendsId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.yesomething.domain.Friends">
    update friends
    set friend_id = #{friendId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      friend_name = #{friendName,jdbcType=VARCHAR},
      friend_type = #{friendType,jdbcType=INTEGER},
      friend_group_type = #{friendGroupType,jdbcType=INTEGER}
    where friends_id = #{friendsId,jdbcType=INTEGER}
  </update>
</mapper>